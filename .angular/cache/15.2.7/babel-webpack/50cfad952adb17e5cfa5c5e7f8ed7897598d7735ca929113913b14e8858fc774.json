{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/api.service\";\nimport * as i2 from \"@angular/router\";\nexport class AddPostGuard {\n  constructor(api, router) {\n    this.api = api;\n    this.router = router;\n    this.isLoggedIn = false;\n  }\n  canActivate(route, state) {\n    this.api.isLoggedIn.subscribe(res => {\n      this.isLoggedIn = res;\n    });\n    if (this.isLoggedIn) {\n      return true;\n    } else {\n      this.router.navigate(['sign-in']);\n      return false;\n    }\n  }\n}\nAddPostGuard.ɵfac = function AddPostGuard_Factory(t) {\n  return new (t || AddPostGuard)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n};\nAddPostGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AddPostGuard,\n  factory: AddPostGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,GAAe,EAAUC,MAAc;IAAvC,QAAG,GAAHD,GAAG;IAAsB,WAAM,GAANC,MAAM;IADnD,eAAU,GAAW,KAAK;EACoC;EAC9DC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,IAAI,CAACJ,GAAG,CAACK,UAAU,CAACC,SAAS,CAAEC,GAAO,IAAG;MACvC,IAAI,CAACF,UAAU,GAAGE,GAAG;IACvB,CAAC,CAAC;IACA,IAAI,IAAI,CAACF,UAAU,EAAE;MACnB,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;MACjC,OAAO,KAAK;;EAElB;;AAfWV,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAW,SAAZX,YAAY;EAAAY,YAFX;AAAM","names":["AddPostGuard","constructor","api","router","canActivate","route","state","isLoggedIn","subscribe","res","navigate","factory","providedIn"],"sourceRoot":"","sources":["/home/mindbowser/Pragati_WorkSpace/Tailwind_Css_Demo/technology_tailwindCss/src/app/common/guard/add-post.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../service/api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddPostGuard implements CanActivate {\n  isLoggedIn:boolean = false;\n  constructor(private api: ApiService, private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    this.api.isLoggedIn.subscribe((res:any)=>{\n      this.isLoggedIn = res;\n    })\n      if (this.isLoggedIn) {\n        return true;\n      } else {\n        this.router.navigate(['sign-in']);\n        return false;\n      }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}